import { describe, test, expect, beforeAll } from 'vitest'
import fs from 'node:fs'
import path from 'node:path'
import sharp from 'sharp'
import stripAnsi from 'strip-ansi'
import { convertImageToAscii } from './video-to-ascii'

describe('convertImageToAscii', () => {
  const fixturesDir = path.join(__dirname, 'fixtures')
  const testImagePath = path.join(fixturesDir, 'test-image.png')
  const realFramePath = path.join(fixturesDir, 'test-frame.png')

  beforeAll(async () => {
    if (!fs.existsSync(fixturesDir)) {
      fs.mkdirSync(fixturesDir, { recursive: true })
    }

    await sharp({
      create: {
        width: 300,
        height: 200,
        channels: 3,
        background: { r: 255, g: 255, b: 255 },
      },
    })
      .composite([
        {
          input: Buffer.from(
            `<svg width="300" height="200">
            <rect x="50" y="50" width="200" height="100" fill="black"/>
            <circle cx="150" cy="100" r="30" fill="white"/>
          </svg>`,
          ),
          top: 0,
          left: 0,
        },
      ])
      .png()
      .toFile(testImagePath)
  })

  test('converts image to ASCII with aspect ratio preserved', async () => {
    const result = await convertImageToAscii({
      imagePath: testImagePath,
      cols: 80,
      rows: 20,
      keepAspectRatio: true,
    })

    expect(result).toMatchInlineSnapshot(`
      "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
      @@@@@@@@@@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@
      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
      @@@@@@@@@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@
      @@@@@@@&@&.                                      .&@&@@@@@@@
      @@@@@@@&@&                                        &@&@@@@@@@
      @@@@@@@&@&               .!*%&&%*!.               &@&@@@@@@@
      @@@@@@@&@&              -%@&@@@@&@%-              &@&@@@@@@@
      @@@@@@@&@&              %@&&&&&&&&@%              &@&@@@@@@@
      @@@@@@@&@&              %@&&&&&&&&@%              &@&@@@@@@@
      @@@@@@@&@&              -%@&@@@@&@%-              &@&@@@@@@@
      @@@@@@@&@&               .!*%&&%*!.               &@&@@@@@@@
      @@@@@@@&@&                                        &@&@@@@@@@
      @@@@@@@&@&.                                      .&@&@@@@@@@
      @@@@@@@@@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@
      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
      @@@@@@@@@@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@
      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    `)
  })

  test('converts image to ASCII without aspect ratio (zoomed)', async () => {
    const result = await convertImageToAscii({
      imagePath: testImagePath,
      cols: 40,
      rows: 20,
      keepAspectRatio: false,
    })

    expect(result).toMatchInlineSnapshot(`
      "@@@@@@@&@&.                             
               .&@&@@@@@@@@@@@@@@&@&          
                                    &@&@@@@@@@
      @@@@@@@&@&                              
                &@&@@@@@@@@@@@@@@&@&          
                                    &@&@@@@@@@
      @@@@@@@&@&                 !#%%#!       
                &@&@@@@@@@@@@@@@@&@&          
           .#@&@@&@#.               &@&@@@@@@@
      @@@@@@@&@&               #@&&&&&&@#     
                &@&@@@@@@@@@@@@@@&@&          
          !@&@@@@@@&@!              &@&@@@@@@@
      @@@@@@@&@&              *@&@@@@@@&@*    
                &@&@@@@@@@@@@@@@@&@&          
          %@&@@@@@@&@%              &@&@@@@@@@
      @@@@@@@&@&              %@&@@@@@@&@%    
                &@&@@@@@@@@@@@@@@&@&          
          *@&@@@@@@&@*              &@&@@@@@@@
      @@@@@@@&@&              !@&@@@@@@&@!    
                &@&@@@@@@@@@@@@@@&@&          "
    `)
  })

  test('handles portrait image with aspect ratio', async () => {
    const portraitPath = path.join(fixturesDir, 'portrait-test.png')
    await sharp({
      create: {
        width: 200,
        height: 300,
        channels: 3,
        background: { r: 128, g: 128, b: 128 },
      },
    })
      .png()
      .toFile(portraitPath)

    const result = await convertImageToAscii({
      imagePath: portraitPath,
      cols: 40,
      rows: 30,
      keepAspectRatio: true,
    })

    expect(result).toMatchInlineSnapshot(`
      ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    `)
  })

  test('fills exact dimensions when keepAspectRatio is false', async () => {
    const result = await convertImageToAscii({
      imagePath: testImagePath,
      cols: 60,
      rows: 30,
      keepAspectRatio: false,
    })

    const lines = result.split('\n')
    expect(lines.length).toBe(30)
    expect(lines[0].length).toBe(60)
  })

  test('converts real video frame with aspect ratio', async () => {
    const result = await convertImageToAscii({
      imagePath: realFramePath,
      cols: 100,
      rows: 30,
      keepAspectRatio: true,
    })

    const lines = result.split('\n')
    expect(lines.length).toBeLessThanOrEqual(30)

    // Verify it creates recognizable ASCII art
    expect(result).toMatchInlineSnapshot(`
      "::::::::::!!!!!!>>>!!::::::::::::::::::::::::::::::::::::------------:::::::::::::::::::::::::::::::::::::
      :::::::::!!!!!>>!!:--''----------:::-------::::::::::::::-------------::::::::::::::::::::::::::::::::::::
      ---:::::!!!!!!!:-'''-------:::::::::-----------::::::::::---------------::::::::::::::::::::::::::::::::::
      ----:::!!!!!!:-''-------::::::::::::::-----------::::::::----------------:::::::::::::::::::::::::::::::::
      ------:!!!!:----------:::::::::::::::::------------::-----:!::::::::-----:::::::::::::::::::::::::::::::::
      -------:!!:---------::::::!!!!:::::::::::--------::::------!!!!!::::::::--::::::::::::::::::::::::::::::::
      --------::---------::::::!!!!!!:::::::::::------::::::------!!!!!:::::::::::::::::::::::::::::::::::::::::
      ---------:--------:::::::!!!!!!!:::::::::::-----::::::-------:!!!!::::::::::::::::::::::::::::::::::::::::
      :--------:::----:::::::::!!!!!!!!:::::::::::----::::::::------:!!!!!::::::::::::::::::::::::::::::::::::::
      ::------:::::--::::::::::!!!!!!!!!::::::::::::---:::::::::------:!!!!:::::::::::::::::::::::::::::::::::::
      !::-----::::::::::::::::!!!!!!!!!!!::::::::::::----::::::::------::!!!::::::::::::::::::::::::::::::::::::
      !!::----::::::::::::::::!!!!!!!!!!!!!:::::::::::------:::::::------::!!!::::::::::::::-:::::::::::::::::::
      !!!:::--::::::::::::::::!!!!!!!!!!!!!!!:::::::::::---------:::::-----::!!!:::::::::::::---:::::::::::::::-
      !!!!!:::-:::::::::-::::::!!!!!!!!!!!!!!!!:::::::::::-----------::-------::!!:::::::::::::-----------------
      !!!!!!:::::::::::::--:::::!!!!!!!!!!!!!!!!!:::::::::::-----------:::::----:::!!::::::::::::--------------:
      :!!!!!!:::::::::::::---::::!!!!!!!!!!!!!!!!!!!::::::::::-----------:::::::---:::!!::::::::::::::::::::::::
      :::!!!!!:::-::::::::::--:::::!!!!!!!!!!!!!!!!!!!!:::::::::-----------::::::::---::::!!!:::::::::::::::::::
      ::::!!!!!:::::::::::::----::::!!!!!!!!!!!!!!!!!!!!!:::::::::-------------:::::::----::::!!!::::::::::::!!!
      :::::!!!!!!::-:::::::::-----:::!!!!!!!!!!!!!!!!!!!!!!::::::::--------------::::::::-----:::!!!!!!!!!!!!!!!
      -:::::!!!!!!::--::::::::------::!!!!!!!!!!!!!!!!!!!!!!:::::::::--------------:::::::-------:::!!!!!!!!!!!!
      --::::::!!!!!::-:::::::::-------::!!!!!!!!!!!!!!!!!!!!!::::::::::----------------:::::--------::!!!!!!!!!!
      ---::::::!!!!:::-:::::::::--------::!!!!!!!!!!!!!!!!:::::::::::::::-----------------::::---------:!!!!!!!!
      ----:::::!!!!!:::-:::::::::---------:!!!!!!!!!!!!!!!!::::::::::::::::------------------:::---------:!!!!!!
      -----::::!!!!!::::::::::::::---------:!!!!!!!!!!!!!!!::::::::::::::::::----------------:-::----------:!!!>
      -----::::!!!!!!:::::::::::::----------:!!!!!!!!!!!!!!!:::::::::::::::::::----------------::::----------:!!
      ----:::::!!!!!!:::::::::::::----------:!!!!!!!!!!!!!!!!::::::::::::::::::::--------------:::::------------
      ---:::::!!!!!!:::--:::::::::----------::!!!!!!!!!!!!!!!:::::::::::::::::::::--------------::::::----------
      -:::::::!!!!!::----:::::::::--------::::!!!!!!!!!!!!!!!:::::::::::::::::::::--------------:::::::---------
      ::::::::::::::------::::::::------:::::!!!!!!!!!!!!!!!!:::::::::::::::::::::--------------::::::::::------
      ::::::::::::--------:::::::::-::::::::!!!!!!!!!!!!!!!!:::::!!!!::::::::::::::-----------::::::::::::::::--"
    `)
  })

  test('converts real video frame zoomed (no aspect ratio)', async () => {
    const result = await convertImageToAscii({
      imagePath: realFramePath,
      cols: 120,
      rows: 30,
      keepAspectRatio: false,
    })

    const lines = result.split('\n')
    expect(lines.length).toBe(30)
    expect(lines[0].length).toBe(120)

    // Verify zoomed version fills exact dimensions
    expect(result).toMatchInlineSnapshot(`
      "---------:--------::::::::!!!!!!::::::::::::----:::::::-------!!!!!!:::::::::::::::::::::::::::::::::::::::---------::--
      ----:::::::::!!!!!!!:::::::::::-----:::::::------:!!!!!::::::::::::::::::::::::::::::::::::::::--------:::----::::::::::
      !!!!!!!::::::::::::----:::::::-------:!!!!!::::::::::::::::::::::::::::::::::::::::------:::::--::::::::::!!!!!!!!!:::::
      :::::::----:::::::-------:!!!!!:::::::::::::-:::::::::::::::::::::::::------::::::-::::::::::!!!!!!!!!::::::::::::----::
      :::::::------:!!!!:::::::::::::-::::::::::::::::::::::::::-----:::::::::::::::::!!!!!!!!!!::::::::::::----::::::::------
      -:!!!!::::::::::::::::::::::::::::::::::::!:::----::::::::::::::::!!!!!!!!!!!!::::::::::::-----::::::::------:!!!:::::::
      :::::::-:::::::::::::::::::::!!::----::::::::::::::::!!!!!!!!!!!!:::::::::::::-----:::::::-------:!!!::::::::::::::-::::
      ::::::::::::::::!!!::---::::::::::::::::!!!!!!!!!!!!!::::::::::::--------:::::-------:!!!::::::::::::::-::-:::::::::::::
      :::!!!:::--:::::::::::::::::!!!!!!!!!!!!!::::::::::::---------:::::------:!!!::::::::::::::-:::::::::::::::::-!!!!:::--:
      :::::::-:::::::!!!!!!!!!!!!!!::::::::::::----------::::------:!!!!::::::::::::----:--::-:-:------!!!!:::--:::::::::-::::
      ::!!!!!!!!!!!!!!!::::::::::::------------::------:!!::::::::::::::----------:-------!!!!!:::-:::::::::--::::::!!!!!!!!!!
      !!!!!!:::::::::::-----------::-------:!!::::::::::::::-----------------!!!!!::::::::::::::--:::::!!!!!!!!!!!!!!!!!::::::
      :::::-----------:::::----::!::::::::::::::----------------!!!!!!::::::::::::::--:::::!!!!!!!!!!!!!!!!!:::::::::::-------
      -----:::::----:!!::::::::::::::-------------:!!!!!!::::::::::::::---:::::!!!!!!!!!!!!!!!!!!::::::::::------------:::::::
      --::!:::::::::::::::::::::::::::::!!!!!::::::::::::::---::::!!!!!!!!!!!!!!!!!!!::::::::::------------::::::::--::!::::::
      ::::::::::::::::::::::!!!!!:::-:::::::::----:::!!!!!!!!!!!!!!!!!!!!!:::::::::-----------:::::::::---:!!:::::::::::::::::
      :::::::::!!!!!::::-::::::::----::::!!!!!!!!!!!!!!!!!!!!!:::::::::-----------::::::::::--::!!:::::::::::::::::::::::::!!!
      !!:::-:::::::::----::::!!!!!!!!!!!!!!!!!!!!!:::::::::-------------::::::::----::!:::::::::::::::::::::::!!!!!::::-::::::
      :::----::::!!!!!!!!!!!!!!!!!!!!!:::::::::-------------::::::::-----:!!!:!!!::!::::::!!!:::::!!!!!:::-::::::::::----:::!!
      !!!!!!!!!!!!!!!!!!!!:::::::::-------------::::::::------:!!!!!!::::!!!!!!!::::::!!!!!:::-:::::::::-----:::!!!!!!!!!!!!!!
      !!!!!!!!::::::::--------------::::::::------::!!!!!!!!!!!!!!!-:::::!!!!!!::-:::::::::------:::!!!!!!!!!!!!!!!!!!!!!:::::
      ::::----------------::::::-------:!!!!!!!!!!!!!!-::::::!!!!!:::-:::::::::------:::!!!!!!!!!!!!!!!!!!!!!:::::::::--------
      -------:::::::-------:!!!!!!!!!!!!!--:::::!!!!!!::-:::::::::-------:::!!!!!!!!!!!!!!!!!!!!::::::::::-----------------:::
      :---------:!!!!!!!!!!!--::::::!!!!!:::-:::::::::-------:::!!!!!!!!!!!!!!!!:!!!::::::::::------------------:::---------:!
      !!!!!!!!!---::::::!!!!:::-:::::::::--------::!!!!!!!!!!!!!!!!:::::::::::::::-----------------::::---------:!!!!!!!!!----
      :::::!!!!!::--:::::::::--------:!!!!!!!!!!!!!!!!::::::::::::::::------------------:::---------:!!!!!!!!----:::::!!!!!:::
      -:::::::::---------:!!!!!!!!!!!!!!!:::::::::::::::::-------------------::----------!!!!!!!                              
                                                                                                                              
                                                                                                                              
                                                                                                                              "
    `)
  })

  test('generates colored ASCII art with ANSI codes', async () => {
    const result = await convertImageToAscii({
      imagePath: realFramePath,
      cols: 80,
      rows: 20,
      keepAspectRatio: true,
      colored: true,
    })

    // Result should contain ANSI escape codes
    expect(result).toContain('\x1b[')

    // Stripping ANSI codes should give us plain ASCII
    const stripped = stripAnsi(result)
    const lines = stripped.split('\n')
    expect(lines.length).toBeLessThanOrEqual(20)

    // The stripped version should only contain our ASCII characters
    const usedChars = new Set(stripped.replace(/\n/g, ''))
    const asciiChars = new Set(" .'-:!><+*#%&@")
    for (const char of usedChars) {
      expect(asciiChars.has(char)).toBe(true)
    }
  })

  test('colored output structure matches grayscale when stripped', async () => {
    const grayscale = await convertImageToAscii({
      imagePath: testImagePath,
      cols: 40,
      rows: 15,
      keepAspectRatio: false,
      colored: false,
    })

    const colored = await convertImageToAscii({
      imagePath: testImagePath,
      cols: 40,
      rows: 15,
      keepAspectRatio: false,
      colored: true,
    })

    // When we strip ANSI codes, the structure should be identical
    const strippedColored = stripAnsi(colored)
    expect(strippedColored).toBe(grayscale)
  })
})
